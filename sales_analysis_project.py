# -*- coding: utf-8 -*-
"""Sales_Analysis_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QJaG5f_WqgI35TTI32FKQo0_3k6s7bTk
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import os

"""Merging 12 Months of Sales Data into Single cvs File

"""

df = pd.read_csv("//content//drive//MyDrive//Pandas-Data-Science-Tasks-master//SalesAnalysis//Sales_Data//Sales_April_2019.csv")
files = [file for file in os.listdir('/content/drive/MyDrive/Pandas-Data-Science-Tasks-master/SalesAnalysis/Sales_Data')]
all_months_data = pd.DataFrame()
for file in files:# print(file)
    df = pd.read_csv("//content//drive//MyDrive//Pandas-Data-Science-Tasks-master//SalesAnalysis//Sales_Data//"+file)
    all_months_data = pd.concat([all_months_data,df])
all_months_data.to_csv("all_data1.csv",index=False)



all_months_data.to_csv("all_data1.csv",index=False)

all_data1 = pd.read_csv("all_data1.csv")
all_data1.head()

"""Clean up the **data** **bold text**

drop nan rows  #find rows with nan

```
# This is formatted as code
```
"""

nan_df = all_data1[all_data1.isna().any(axis=1)]
nan_df.head()
all_data1 =all_data1.dropna(how='all')
all_data1.head()

find'or' and delete it

all_data1 =all_data1[all_data1['Order Date'].str[0:2]!='Or']
all_data1.head()



"""augment data with additional columns #Add Month Column"""

all_data1['Month']= all_data1['Order Date'].str[0:2]
all_data1['Month']=all_data1['Month'].astype('int32')
all_data1.head()

"""convet column to the correct data type"""

all_data1['Quantity Ordered']=pd.to_numeric(all_data1['Quantity Ordered']) #makeint
all_data1['Price Each'] = pd.to_numeric(all_data1['Price Each']) #Make float
all_data1.head()

"""all_data['Quantity Ordered"""

all_data1['Sales']=all_data1['Quantity Ordered']*all_data1['Price Each']
all_data1.head()

results = all_data1.groupby('Month').sum()

all_data1['Column']= all_data1['Purchase Address'].apply(lambda x: x.split(',')[1])
all_data1.head()

"""Add a sales column"""

all_data1=all_data1['Column'].rename('City')
all_data1.head()

all_data1.head()

"""Add a City Column"""



# #lets us .applied method
def get_city(address):
  return address.split(',')[1]
# all_data['Column']= all_data['Purchase Address'].apply(lambda x: x.split(',')[1])

# all_data.head()
def get_State(address):
  return address.split(',')[2].split(' ')
all_data1['City'] = all_data1['Purchase Address'].apply(lambda x: f"{get_city(x)} ({get_State(x)})")
all_data1.head()

"""what was the best month for sales ?how much was earned that month?"""

all_data.head()



results= all

import matplotlib.pyplot as plt
month = range(1,13)

plt.bar(month, results['Sales'])
plt.xticks(month)
plt.ylabel('Sales in USD($)')
plt.xlabel('Month number')
plt.show()

"""What City have Highest no of sales ?"""

results = all_data1.groupby('City').sum()
results

import matplotlib.pyplot as plt
Cities =[City for City,df in all_data1.groupby('City')] #all_data1['City'].unique()

plt.bar(Cities, results['Sales'])
plt.xticks(Cities, rotation='vertical',size=8)
plt.ylabel('Sales in USD($)')
plt.xlabel('City')
plt.show()

"""what time should we display advertisement to maximize likelyhood of customer buying product?"""

all_data1['Order Date']=pd.to_datetime(all_data1['Order Date'])

all_data1['hour'] = all_data1['Order Date'].dt.hour
all_data1['minute'] = all_data1['Order Date'].dt.minute
all_data1.head()

hours = [hour for hour,df in all_data1.groupby('Hour')]
plt.plot(hours,all_data1.groupby(['Hour']).count())
all_data1.groupby(['Hour']).count()
plt.xticks(hours)
plt.xlabel('Hours')
plt.ylabel('No of Orders')
plt.grid()
plt.show()

"""what product are most often sold together?"""

df = all_data1[all_data1['Order ID'].duplicated(keep=False)]
# df.head()
df['Grouped']=df.groupby('Order ID')['Product'].transform(lambda x:','.join(x))
df=df[['Order ID','Grouped']].drop_duplicates()
df.head()

from itertools import combinations
from collections import Counter
count = Counter()
for row in df['Grouped']:
  row_list= row.split(',')
  count.update(Counter(combinations(row_list, 2)))
print(count)
for key, value in count.most_common(10):
  print(key,value)

"""what product sold the most and why do you think it sold the most"""

product_group = all_data1.groupby('Product')
# product_group.sum()
quantity_ordered = product_group.sum()['Quantity Ordered']
products =[product for product, df in product_group]
plt.bar(products,quantity_ordered)
plt.xlabel('Product')
plt.ylabel('Quantity Ordered')

plt.xticks(products, rotation='vertical',size=8)
plt.show()

prices = all_data1.groupby('Product').mean()['Price Each']
prices

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.bar(products,quantity_ordered,color='y')
ax2.plot(products, prices,'b-')
ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantiy Ordered',color='r')
ax2.set_ylabel('Price($)',color='g')
ax1.set_xticklabels(products,rotation='vertical', size=8)
plt.show()